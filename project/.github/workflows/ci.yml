name: MyBank CI/CD Pipeline

on:
  push:
    branches: [ main, develop ] # Déclenchement lors d'un push sur main ou develop
  pull_request:
    branches: [ main ] # Déclenchement lors d'une PR vers main

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Vérifications de qualité du code
    
    steps:
    - name: Récupérer le code source
      uses: actions/checkout@v4 # Récupère le code source

    - name: Configurer Node.js
      uses: actions/setup-node@v4 # Configure l'environnement Node.js
      with:
        node-version: '18'
        cache: 'npm'

    - name: Installer les dépendances
      run: npm ci # Installe les dépendances

    - name: Lancer ESLint
      run: npm run lint # Analyse statique du code

    - name: Vérification TypeScript
      run: npm run type-check # Vérifie le typage TypeScript

    - name: Vérification Prettier
      run: npm run format:check # Vérifie le formatage du code

  test:
    runs-on: ubuntu-latest
    name: Tests
    needs: quality-checks # Attend la fin des vérifications de qualité
    
    steps:
    - name: Récupérer le code source
      uses: actions/checkout@v4

    - name: Configurer Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Installer les dépendances
      run: npm ci

    - name: Lancer les tests unitaires avec couverture
      run: npm run test:coverage # Lance les tests unitaires

    - name: Envoyer les rapports de couverture à Codecov
      uses: codecov/codecov-action@v3 # Envoie la couverture
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

    - name: Installer les navigateurs Playwright
      run: npx playwright install --with-deps # Installe les navigateurs pour E2E

    - name: Construire l'application
      run: npm run build # Build pour les tests E2E

    - name: Lancer les tests E2E
      run: npm run test:e2e # Lance les tests end-to-end

    - name: Uploader les résultats E2E
      uses: actions/upload-artifact@v3
      if: failure() # Seulement si E2E échoue
      with:
        name: playwright-report
        path: playwright-report/

  build:
    runs-on: ubuntu-latest
    name: Build & Performance
    needs: [quality-checks, test] # Attend la fin des vérifications et tests
    
    steps:
    - name: Récupérer le code source
      uses: actions/checkout@v4

    - name: Configurer Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Installer les dépendances
      run: npm ci

    - name: Construire l'application
      run: npm run build # Build de l'application

    - name: Lancer Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun # Audit de performance

    - name: Uploader les artefacts de build
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: dist/ # Sauvegarde du build

  security:
    runs-on: ubuntu-latest
    name: Audit de sécurité
    needs: quality-checks # Attend la fin des vérifications de qualité
    
    steps:
    - name: Récupérer le code source
      uses: actions/checkout@v4

    - name: Configurer Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Installer les dépendances
      run: npm ci

    - name: Lancer l'audit de sécurité
      run: npm audit --audit-level moderate # Audit npm

    - name: Lancer l'analyse Snyk
      uses: snyk/actions/node@master # Analyse Snyk
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  deploy:
    runs-on: ubuntu-latest
    name: Déploiement en production
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Récupérer le code source
      uses: actions/checkout@v4

    - name: Télécharger les artefacts de build
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: dist/

    - name: Déployer sur Netlify
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=dist
      env:
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

    - name: Notifier le succès du déploiement
      if: success()
      run: |
        echo "✅ Déploiement réussi en production"